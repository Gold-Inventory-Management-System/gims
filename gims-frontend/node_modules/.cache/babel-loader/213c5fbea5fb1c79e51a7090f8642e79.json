{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/Users/chalanthornaenguthaivadt/Desktop/Thesis/Gold-Inventory-Management-System/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/chalanthornaenguthaivadt/Desktop/Thesis/Gold-Inventory-Management-System/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _defineProperty = require(\"/Users/chalanthornaenguthaivadt/Desktop/Thesis/Gold-Inventory-Management-System/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _regeneratorRuntime = require(\"/Users/chalanthornaenguthaivadt/Desktop/Thesis/Gold-Inventory-Management-System/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _classCallCheck = require(\"/Users/chalanthornaenguthaivadt/Desktop/Thesis/Gold-Inventory-Management-System/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/chalanthornaenguthaivadt/Desktop/Thesis/Gold-Inventory-Management-System/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar INITIAL_STATE = 1;\nvar FAIL_STATE = 0;\n/**\n * A StateMachine represents a deterministic finite automaton.\n * It can perform matches over a sequence of values, similar to a regular expression.\n */\nvar StateMachine = /*#__PURE__*/function () {\n  function StateMachine(dfa) {\n    _classCallCheck(this, StateMachine);\n    this.stateTable = dfa.stateTable;\n    this.accepting = dfa.accepting;\n    this.tags = dfa.tags;\n  }\n  /**\n   * Returns an iterable object that yields pattern matches over the input sequence.\n   * Matches are of the form [startIndex, endIndex, tags].\n   */\n  _createClass(StateMachine, [{\n    key: \"match\",\n    value: function match(str) {\n      var self = this;\n      return _defineProperty({}, Symbol.iterator, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var state, startRun, lastAccepting, lastState, p, c;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                state = INITIAL_STATE;\n                startRun = null;\n                lastAccepting = null;\n                lastState = null;\n                p = 0;\n              case 5:\n                if (!(p < str.length)) {\n                  _context.next = 21;\n                  break;\n                }\n                c = str[p];\n                lastState = state;\n                state = self.stateTable[state][c];\n                if (!(state === FAIL_STATE)) {\n                  _context.next = 15;\n                  break;\n                }\n                if (!(startRun != null && lastAccepting != null && lastAccepting >= startRun)) {\n                  _context.next = 13;\n                  break;\n                }\n                _context.next = 13;\n                return [startRun, lastAccepting, self.tags[lastState]];\n              case 13:\n                // reset the state as if we started over from the initial state\n\n                state = self.stateTable[INITIAL_STATE][c];\n                startRun = null;\n              case 15:\n                // start a run if not in the failure state\n\n                if (state !== FAIL_STATE && startRun == null) {\n                  startRun = p;\n                } // if accepting, mark the potential match end\n\n                if (self.accepting[state]) {\n                  lastAccepting = p;\n                } // reset the state to the initial state if we get into the failure state\n\n                if (state === FAIL_STATE) {\n                  state = INITIAL_STATE;\n                }\n              case 18:\n                p++;\n                _context.next = 5;\n                break;\n              case 21:\n                if (!(startRun != null && lastAccepting != null && lastAccepting >= startRun)) {\n                  _context.next = 24;\n                  break;\n                }\n                _context.next = 24;\n                return [startRun, lastAccepting, self.tags[state]];\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n    /**\n     * For each match over the input sequence, action functions matching\n     * the tag definitions in the input pattern are called with the startIndex,\n     * endIndex, and sub-match sequence.\n     */\n  }, {\n    key: \"apply\",\n    value: function apply(str, actions) {\n      var _iterator = _createForOfIteratorHelper(this.match(str)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 3),\n            start = _step$value[0],\n            end = _step$value[1],\n            tags = _step$value[2];\n          var _iterator2 = _createForOfIteratorHelper(tags),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var tag = _step2.value;\n              if (typeof actions[tag] === 'function') {\n                actions[tag](start, end, str.slice(start, end + 1));\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n  return StateMachine;\n}();\nmodule.exports = StateMachine;","map":{"version":3,"mappings":";;;;;;;;AAAA,IAAMA,aAAa,GAAG,CAAtB;AACA,IAAMC,UAAU,GAAG,CAAnB;;;;;IAMqBC,YAAN;EACbC,sBAAYC,GAAD,EAAM;IAAA;SACVC,UAAL,GAAkBD,GAAG,CAACC,UAAtB;SACKC,SAAL,GAAiBF,GAAG,CAACE,SAArB;SACKC,IAAL,GAAYH,GAAG,CAACG,IAAhB;;;;;;;;WAOFC,eAAMC,GAAD,EAAM;UACLC,IAAI,GAAG,IAAX;iCAEIC,MAAM,CAACC,QAAT;QAAA;QAAA;UAAA;YAAA;cAAA;gBACMC,KAAK,GAAGb,aAAZ;gBACIc,QAAQ,GAAG,IAAf;gBACIC,aAAa,GAAG,IAApB;gBACIC,SAAS,GAAG,IAAhB;gBAESC,CAAC,GAAG,CAAb;cAAA;gBAAA,MAAgBA,CAAC,GAAGR,GAAG,CAACS,MAAxB;kBAAA;kBAAA;gBAAA;gBACMC,CAAC,GAAGV,GAAG,CAACQ,CAAD,CAAX;gBAEAD,SAAS,GAAGH,KAAZ;gBACAA,KAAK,GAAGH,IAAI,CAACL,UAAL,CAAgBQ,KAAhB,EAAuBM,CAAvB,CAAR;gBAAA,MAEIN,KAAK,KAAKZ,UAAd;kBAAA;kBAAA;gBAAA;gBAAA,MAEMa,QAAQ,IAAI,IAAZ,IAAoBC,aAAa,IAAI,IAArC,IAA6CA,aAAa,IAAID,QAAlE;kBAAA;kBAAA;gBAAA;gBAAA;uBACQ,CAACA,QAAD,EAAWC,aAAX,EAA0BL,IAAI,CAACH,IAAL,CAAUS,SAAV,CAA1B,CAAN;cAAA;gBAHsB;;gBAOxBH,KAAK,GAAGH,IAAI,CAACL,UAAL,CAAgBL,aAAhB,EAA+BmB,CAA/B,CAAR;gBACAL,QAAQ,GAAG,IAAX;cAAA;gBAdiC;;oBAkB/BD,KAAK,KAAKZ,UAAV,IAAwBa,QAAQ,IAAI,IAAxC,EAA8C;kBAC5CA,QAAQ,GAAGG,CAAX;iBAnBiC;;oBAuB/BP,IAAI,CAACJ,SAAL,CAAeO,KAAf,CAAJ,EAA2B;kBACzBE,aAAa,GAAGE,CAAhB;iBAxBiC;;oBA4B/BJ,KAAK,KAAKZ,UAAd,EAA0B;kBACxBY,KAAK,GAAGb,aAAR;;;gBA7B4BiB,CAAC,EAAjC;gBAAA;gBAAA;cAAA;gBAAA,MAkCIH,QAAQ,IAAI,IAAZ,IAAoBC,aAAa,IAAI,IAArC,IAA6CA,aAAa,IAAID,QAAlE;kBAAA;kBAAA;gBAAA;gBAAA;uBACQ,CAACA,QAAD,EAAWC,aAAX,EAA0BL,IAAI,CAACH,IAAL,CAAUM,KAAV,CAA1B,CAAN;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;WAWRO,eAAMX,GAAD,EAAMY,OAAN,EAAe;MAAA,2CACa,KAAKb,KAAL,CAAWC,GAAX,CAA/B;QAAA;MAAA;4DAAgD;UAAA;YAAtCa,KAAD;YAAQC,GAAR;YAAahB,IAAb;UAAA,4CACSA,IAAhB;YAAA;UAAA;mEAAsB;cAAA,IAAbiB,GAAT;kBACM,OAAOH,OAAO,CAACG,GAAD,CAAd,KAAwB,UAA5B,EAAwC;gBACtCH,OAAO,CAACG,GAAD,CAAP,CAAaF,KAAb,EAAoBC,GAApB,EAAyBd,GAAG,CAACgB,KAAJ,CAAUH,KAAV,EAAiBC,GAAG,GAAG,CAAvB,CAAzB","names":["INITIAL_STATE","FAIL_STATE","StateMachine","constructor","dfa","stateTable","accepting","tags","match","str","self","Symbol","iterator","state","startRun","lastAccepting","lastState","p","length","c","apply","actions","start","end","tag","slice"],"sources":["/Users/chalanthornaenguthaivadt/Desktop/Thesis/Gold-Inventory-Management-System/node_modules/dfa/src/StateMachine.js"],"sourcesContent":["const INITIAL_STATE = 1;\nconst FAIL_STATE = 0;\n\n/**\n * A StateMachine represents a deterministic finite automaton.\n * It can perform matches over a sequence of values, similar to a regular expression.\n */\nexport default class StateMachine {\n  constructor(dfa) {\n    this.stateTable = dfa.stateTable;\n    this.accepting = dfa.accepting;\n    this.tags = dfa.tags;\n  }\n\n  /**\n   * Returns an iterable object that yields pattern matches over the input sequence.\n   * Matches are of the form [startIndex, endIndex, tags].\n   */\n  match(str) {\n    let self = this;\n    return {\n      *[Symbol.iterator]() {\n        let state = INITIAL_STATE;\n        let startRun = null;\n        let lastAccepting = null;\n        let lastState = null;\n\n        for (let p = 0; p < str.length; p++) {\n          let c = str[p];\n\n          lastState = state;\n          state = self.stateTable[state][c];\n\n          if (state === FAIL_STATE) {\n            // yield the last match if any\n            if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {\n              yield [startRun, lastAccepting, self.tags[lastState]];\n            }\n\n            // reset the state as if we started over from the initial state\n            state = self.stateTable[INITIAL_STATE][c];\n            startRun = null;\n          }\n\n          // start a run if not in the failure state\n          if (state !== FAIL_STATE && startRun == null) {\n            startRun = p;\n          }\n\n          // if accepting, mark the potential match end\n          if (self.accepting[state]) {\n            lastAccepting = p;\n          }\n\n          // reset the state to the initial state if we get into the failure state\n          if (state === FAIL_STATE) {\n            state = INITIAL_STATE;\n          }\n        }\n\n        // yield the last match if any\n        if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {\n          yield [startRun, lastAccepting, self.tags[state]];\n        }\n      }\n    };\n  }\n\n  /**\n   * For each match over the input sequence, action functions matching\n   * the tag definitions in the input pattern are called with the startIndex,\n   * endIndex, and sub-match sequence.\n   */\n  apply(str, actions) {\n    for (let [start, end, tags] of this.match(str)) {\n      for (let tag of tags) {\n        if (typeof actions[tag] === 'function') {\n          actions[tag](start, end, str.slice(start, end + 1));\n        }\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}